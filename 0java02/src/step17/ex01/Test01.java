/*
 * 
 * 멀티 태스킹?
 * - 한 CPU(Core)를 가지고 여러 프로그램을 동시에 실행하는 방법.
 * - 동시에 실행하는 것처럼 보이는 기술.
 *   => 시간을 쪼개서(time slice) 여러 프로그램의 명령을  돌아가면서 실행.
 * - CPU 관리 기법(process scheduling)
 *   1) Round Robin - Window OS
 *      우선 순위에 상관없이 일정 시간마다 돌아가면서  프로그램의 명령을 처리하는 방법
 *   2) Priority - Linux, Unix
 *      우선 순위가 높은 프로그램을 먼저 실행하는 방법.
 *      물론, 일정 시간이 지나면 다음 순위의 프로그램을 실행한다.
 *      단점, 우선 순위가 낮으면 계속 실행이 연기되는 문제가 있다.
 *      => 해결책: 실행이 연기될 때마다 우선 순위를 높인다. => Aging 기법
 *      => 우선 순위만으로 멀티 태스킹을 원할하게 처리할 수 없다. => 시분할 방법 도입
 *      
 * 멀티 테스킹 구현?
 * 1) 멀티 프로세싱 - fork()
 *   => 프로세스를 복제하는 방식
 *   => 프로세스가 사용하는 힙 메모리도 복제한다.
 *   => 부모 프로세스가 실행 종료하더라도 자식 프로세스는 계속 실행한다.
 * 2) 멀티 스레딩 - thread
 *   => 동시에 진행해야 할 코드만 분리하여 처리하는 방식
 *   => 부모 프로세스의 힙 메모리를 공유한다.
 *   => 멀티 프로세싱 방법 보다 자원을 덜 사용한다.
 *   => 부모 프로세스가 종료하면 모든 자식 스레드는 자동 종료된다.
 *   
 * 용어 정리
 * 1) 프로세스 - 메모리에 로드되어 실행중인 프로그램
 * 2) 컨텍스트(context) - 프로세스 실행 정보
 * 3) 컨텍스트 스위칭(context switching)
 *    - 다른 프로세스로 CPU 사용권을 넘기기 위해 실행 정보(context)를 교체하는 작업.
 *    
 * 스레드
 * - OS로부터 독립적으로 CPU 사용권을 받아서 실행하는 코드이다.
 * - 멀티 태스킹을 구현하는 핵심 기술.
 * 
 * 자바에서 스레드를 구현하는 방법
 * 1) Thread를 상속 받기
 * 2) Runnable 인터페이스를 구현하기
 * 
 */
package step17.ex01;

public class Test01 {
  
  public static void main(String[] args) {
    // "main" 스레드
    // => JVM이 직접 main() 메서드를 호출하는 것이 아니다.
    // => "main" 스레드에게 위임한다.
    // => JVM은 메모리나 스레드 등 자원을 관리를 수행한다.
    
    // main() 메서드를 호출하는 스레드 알아내기
    Thread main = Thread.currentThread();
    System.out.println(main.getName());
  }

}
