[주제: 중첩 클래스(inner class or nested class)]
=> 패키지 맴버 클래스? 패키지에 소속된 , 일반 클래스,
=> 중첩 클래스? 다른 클래스에 소속된 클래스,
  목적1) 특정 클래스에서만 사용하는 경우,
      => 특정 클래스 안에 해당 클래스를 선언한다.
      => 사용 범위를 제한하는 효과.
      => 클래스 소스 파일의 다량으로 생성되는 것을 막을 수 있다.
  목적2) 상수 값을 묶는 용도의 작은 클래스를 정의하는 경우,
      => 패키지 멤버로 정의하면 다량으로 소스 파일이 생성됨.
      => 중첩 클래스로 정의하면 한 클래스에서 관리할 수 있음.
      
OuterClass.java - 네 가지 종류의 이너 클래스 선 보이기
ex01 - 중첩 클래스를 사용하기 전
       => 상수 값을 정의할 때 패키지 멤버 클래스로 만든다.
       => 상수 값을 분류하는 작은 단위의 클래스가 많이 생성된다.
       => 소스 파일이 많아지는 문제가 있다. 
ex02 - 중첩 클래스를 사용하기 후
       => top level inner class를 이용하여 상수 값을 관리하자!
       => static inner class
       => 중첩 클래스를 스태틱으로 선언하면 클래스 이름으로 바로 접근할 수 있다.
       => 특히 상수 값을 사용할 때 편리하다!
       => 한 클래스 안에 작은 클래스가 들어 있기 때문에 소스 파일이 한 개만 존재한다.
               물론, 컴파일하면 각 클래스마다 바이트코드(.class)가 생성된다.
               
ex03 - 멤버 이너 클래스 사용
       => 특정 클래스에서만 사용하는 경우,
       => 인스턴스 변수나 인스턴스 메서드를 사용하는 이너 클래스가 필요할 때
       
ex04 - 로컬 이너 클래스 적용 전

ex05 - 로컬 이너 클래스 적용 후
       =>  LinkedList에  AbstractIterator 멤버 이너 클래스를 선언한다.
       
ex06 - 클래스를 상속 받는 익명 이너 클래스
       => 다른 클래스를 상속 받아서 로컬 이너 클래스를 만들자!
       => 로컬 이너 클래스의 인스턴스를 딱 한 개만 만든다면, 익명 이너 클래스로 정의하라!
       => 인스턴스를 리턴하는 경우 return 문에 바로 익명 이너 클래스를 선언한다. 
       
ex07 - 인터페이스를 구현하는 익명 이너 클래스
       => 익명 이너 클래스는 동시에 수퍼클래스를 상속받고 인터페이스를 구현할 수 없다.
         `오직 상속 받거나 구현하거나 둘 중 하나만 해야 한다. 