작업목표: Command 패턴 적용하기, 인터페이스 적용
Command 패턴?
- 메서드를 객체화시킨다.
- 기존 클래스에 기능을 추가하기 위해 메서드를 정의하기 보다는,
  추가할 기능을 클래스로 만든다.
- 기존 코드를 손댈 필요가 없다.
- 기능 확장이 쉽다.

인터페이스
- caller 와  callee 사이의 호출 규칙
- 호출하는 코드를 작성하는 개발자가 일관되게 호출할 수 있도록 하는 문법이다.
- 메서드의 시그너처(이름, 리턴 타입, 파라미터 타입)를 정의한다. 
  => 추상 메서드 선언
  => 규칙은 공개되어야 하기 때문에 무조건 public 이다.
- 인스턴스 변수는 정의할 수 없다. => public static final 조건을 갖는 상수이다.

실습:
1. ProjectControl에 있는 각 명령을 처리하는 메서드를 클래스로 정의한다.
2. ProjectControl과 Command 클래스 사이의 호출 규칙을 정의한다.
   => Command 인터페이스 선언
3. 각 command에게 규칙을 적용한다.